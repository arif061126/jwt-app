//package com.ordermanagement.tokenverify;

import android.util.Base64;
import android.util.Log;
//import java.util.Base64;

import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;

public class JwtVerifier {

    public static void main(String[] args) {
        // Provided public key and JWT token
        String publicKeyString = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6PStBO2eTNXiuNcPtQXz" +
                "3NU/3NBZ5K1hFegz9myvlCGBd+PzLfX6O9UJ2m2Sg5VG5qj6jAl7C0rsZnZZkNyA" +
                "MzWjGXJJjI8wxPYzLDB3LJNxG3JihueeTmInzyvYv/X7QLt8H6kLlFPpZzGhJxFG" +
                "zWNdQZX2AQfrjGO4p7Mg3cVgQK27U8B3G/A1ZjzMx5n5cSlFKtMn71rQnmr1x4BU" +
                "SS2q8tSKYX4e0/ZzAl3cMRLjBYGwF8bwq4eTwvcmqBc1jMumgHf4tMNdYL6H8a3F" +
                "jqoeDKEl5yqXaH0k8+K8z9ZcYI3xR0RSdzUcHvwnafJ7yn29i4N3M0Xfdq/+3sO0" +
                "lwIDAQAB";

        String jwtToken = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.YFGAAdUwxWyTnrL0P1uInFbJq9fD-EukDxGvvH2_8_xmO9oZB-IRGk6r5NhZKWNSNG_cFW3qLQit7RINBp4ejP7PXavChBDyFpBN8yYkRrTJYCGQcgfqV_nH0cS9oV8OMy2i_lIbH50pZZ6GQFS4g2WGrJFyY_vxU3lOosSsnJ9I";

        // Verify the JWT token using the provided public key
        boolean verificationResult = verifyToken(jwtToken,publicKeyString);

        if (verificationResult) {
            System.out.println("JWT Token is valid.");
        } else {
            System.out.println("JWT Token is invalid.");
        }
    }

    public static boolean verifyToken(String jwtToken, String publicKeyString) {
        try {
            String[] jwtParts = jwtToken.split("\\.");

            // Decode header and payload
            String header = new String(Base64.decode(jwtParts[0], Base64.DEFAULT));
            String payload = new String(Base64.decode(jwtParts[1], Base64.DEFAULT));

            // Verify header
            if (!isValidHeader(header)) {
                //Log.d("Token Verification", "Invalid token header");
                Log.d("Token Verification", "Invalid token header");
                return false;
            }

            // Decode public key
            byte[] keyBytes = Base64.decode(publicKeyString, Base64.DEFAULT);
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PublicKey publicKey = keyFactory.generatePublic(keySpec);

            // Verify signature
            Signature signature = Signature.getInstance("SHA256withRSA");
            signature.initVerify(publicKey);
            signature.update((jwtParts[0] + "." + jwtParts[1]).getBytes());
            if (!signature.verify(Base64.decode(jwtParts[2], Base64.DEFAULT))) {
                Log.d("Token Verification", "Invalid signature111");
                return false;
            }

            // Verify expiration time
            // You need to parse the payload JSON and extract the "exp" field to compare with the current time

            // Verify audience
            // You need to parse the payload JSON and extract the "aud" field to compare with the expected audience

            // If all verifications passed, the token is valid
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            Log.d("Token Error", e.getMessage());
            return false;
        }
    }

    private static boolean isValidHeader(String header) {
        return header.contains("\"typ\":\"JWT\"");
    }
}
